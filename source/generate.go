package main

import (
	"bufio"
	"bytes"
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strconv"
)

var FlagDebug bool

func main() {
	FlagDebug, _ = strconv.ParseBool(os.Getenv("COLORS_DEBUG"))

	name := "source.go"
	generate(name)
	gofmt(name)
}

func generate(file string) {
	src, err := readColors()
	if err != nil {
		panic(err)
	}
	defer src.Close()

	dst, err := os.Create(file)
	if err != nil {
		panic(err)
	}
	defer dst.Close()

	out := bufio.NewWriter(dst)
	defer out.Flush()

	fmt.Fprint(
		out,
		`// Code generated by "source/generate.go"; DO NOT EDIT.

package colornames

`)

	names := new(bytes.Buffer)
	index := 0
	indexes := new(bytes.Buffer)
	rgbs := new(bytes.Buffer)

	r := csv.NewReader(src)

	// skip the first line (header)
	if _, err := r.Read(); err != nil {
		panic(err)
	}

	for {
		rec, err := r.Read()
		if err != nil {
			if err != io.EOF {
				panic(err)
			}
			break
		}
		name := rec[0]
		hex := rec[1]
		rgb, err := strconv.ParseInt(hex[1:], 16, 64)
		if err != nil {
			log.Println(hex)
			panic(err)
		}

		if FlagDebug {
			names.WriteString(`"+` + "\n" + `"`)
			indexes.WriteString("\n")
		}
		names.WriteString(name)

		index += len(name)
		indexes.WriteString(strconv.Itoa(index) + ",")

		if FlagDebug {
			rgbs.WriteString(fmt.Sprintf("0x%02x, 0x%02x, 0x%02x, // %s\n", int(rgb>>16)&0xff, int(rgb>>8)&0xff, int(rgb>>0)&0xff, name))
		} else {
			rgbs.WriteString(fmt.Sprintf("0x%02x, 0x%02x, 0x%02x,", int(rgb>>16)&0xff, int(rgb>>8)&0xff, int(rgb>>0)&0xff))
		}
	}

	out.WriteString(`const _Names_name = "`)
	out.Write(names.Bytes())
	out.WriteString(`"

var _Names_index = [...]uint32{
0,`)
	out.Write(indexes.Bytes())
	out.WriteString(`
}

var _RGBs = [...]uint8{
`)
	out.Write(rgbs.Bytes())
	out.WriteString("\n}")
}

func gofmt(file string) {
	exe := exec.Command("gofmt", "-w", file)
	err := exe.Run()
	if err != nil {
		panic(err)
	}
}

func readColors() (io.ReadCloser, error) {
	temp := "source/colornames.csv"
	if _, err := os.Stat(temp); err != nil {
		if !os.IsNotExist(err) {
			return nil, err
		}
		w, err := os.Create(temp)
		if err != nil {
			return nil, err
		}

		fmt.Fprintln(os.Stderr, "downloading from GitHub...")
		resp, err := http.Get(`https://raw.githubusercontent.com/meodai/color-names/master/src/colornames.csv`)
		if err != nil {
			return nil, err
		}
		io.Copy(w, resp.Body)
		resp.Body.Close()
		w.Close()
	}

	return os.Open(temp)
}
